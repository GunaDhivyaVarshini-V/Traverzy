19/06/2025
-callback()-calls a function inside a function

  function greet(name,callback){
   console.log("hi"+name);
   callback();
   }
 
  function sayBye(){
     console.log("bye");
   }

   greet("guna",sayBye);
//diamond
let n= parseInt(prompt("Enter the value of n:"));

for (let i = -n; i <= n; i++) {
  let line = "";
  for (let j = -n; j <= n; j++) {
    if (Math.abs(i) + Math.abs(j) <= n) {
      line += "* ";
    } else {
      line += "  ";
    }
  }
  console.log(line);
}


-setTimeout(function(){......},2000); //gets executed after 2 sec

-sync vs async

-error handling

-hoisting... function can be declared anywhere

-custom error "throw new error("");,try{}catch(error){}"
-setInterval()
-clearInterval()
-callstack

24/06/2025

-.then() //promises
-.catch() //catches error

-chaining multiple functions by order of dependency
-promise.all([p1,p2,p3]) \\for multiple function check at once
 .then()
 .catch()
-promise.race() //returns first resolved/rejected promise
-promise.allSettled() //returns the results of all promises

//jquery
xhr=new XMLHttpRequest();
xhr.open('GET','URL',true/false"based on whether other operations should wait or not")
xhr.readyState()

//08/07/2025
-----Express-----
1.npm install express-session 
  -it will be added  node_modules and package.json
  
  // ✅ auth.routes.js (Only for authentication-related routes)
const express = require("express");
const router = express.Router();
const userController = require("../controllers/user.controller");

// 🔐 Public authentication routes
router.post("/register", userController.register);
router.post("/login", userController.login);
router.get("/current-user", userController.getCurrentUser);
router.get("/logout", userController.logout);

module.exports = router;


// ✅ user.routes.js (Only for admin-only user management routes)
const express = require("express");
const router = express.Router();
const userController = require("../controllers/user.controller");

// 🔐 Middleware to check if user is admin
router.use((req, res, next) => {
  const user = req.session.user;
  if (!user || user.role !== "admin") {
    return res.status(403).json({ error: "Unauthorized" });
  }
  next();
});

// 👤 Admin-only user management routes
router.get("/all-users", userController.getAllUsers);
router.get("/user/:email", userController.getUserByEmail);
router.put("/user/:email", userController.updateUser);
router.delete("/user/:email", userController.deleteUser);

module.exports = router;


// ✅ user.controller.js (Full controller for auth + user actions)
const fs = require("fs");
const path = require("path");
const usersFile = path.join(__dirname, "..", "data", "users.json");

// 🔐 AUTH CONTROLLERS
exports.register = (req, res) => {
  const { name, email, password, role } = req.body;
  let users = [];

  try {
    users = JSON.parse(fs.readFileSync(usersFile, "utf-8"));
  } catch {}

  if (users.find((u) => u.email === email)) {
    return res.status(400).json({ error: "User already exists" });
  }

  const newUser = {
    userId: `user-${Date.now()}`,
    name,
    email,
    password,
    role,
  };

  users.push(newUser);
  fs.writeFileSync(usersFile, JSON.stringify(users, null, 2));
  res.json({ message: "Registered successfully" });
};

exports.login = (req, res) => {
  const { email, password } = req.body;
  const users = JSON.parse(fs.readFileSync(usersFile, "utf-8"));
  const user = users.find((u) => u.email === email && u.password === password);

  if (!user) {
    return res.status(401).json({ error: "Invalid credentials" });
  }

  req.session.user = user;
  res.json({ message: "Login successful", user: { name: user.name, role: user.role } });
};

exports.logout = (req, res) => {
  req.session.destroy(() => {
    res.json({ message: "Logged out" });
  });
};

exports.getCurrentUser = (req, res) => {
  if (!req.session.user) return res.status(401).json({ error: "Not logged in" });
  res.json({ user: req.session.user });
};


// 👤 USER MANAGEMENT CONTROLLERS (admin only)
exports.getAllUsers = (req, res) => {
  const users = JSON.parse(fs.readFileSync(usersFile, "utf-8"));
  res.status(200).json(users);
};

exports.getUserByEmail = (req, res) => {
  const email = req.params.email;
  const users = JSON.parse(fs.readFileSync(usersFile, "utf-8"));
  const user = users.find((u) => u.email === email);
  if (!user) return res.status(404).json({ error: "User not found" });
  res.json(user);
};

exports.updateUser = (req, res) => {
  const email = req.params.email;
  const { name, role } = req.body;
  let users = JSON.parse(fs.readFileSync(usersFile, "utf-8"));
  const index = users.findIndex((u) => u.email === email);
  if (index === -1) return res.status(404).json({ error: "User not found" });

  users[index].name = name;
  users[index].role = role;
  fs.writeFileSync(usersFile, JSON.stringify(users, null, 2));
  res.json({ message: "User updated successfully" });
};

exports.deleteUser = (req, res) => {
  const email = req.params.email;
  let users = JSON.parse(fs.readFileSync(usersFile, "utf-8"));
  const filtered = users.filter((u) => u.email !== email);

  if (filtered.length === users.length) {
    return res.status(404).json({ error: "User not found" });
  }

  fs.writeFileSync(usersFile, JSON.stringify(filtered, null, 2));
  res.json({ message: "User deleted successfully" });
};